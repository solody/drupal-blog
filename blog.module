<?php

/**
 * @file
 * Enables multi-user blogs.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldConfig;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\NodeInterface;
use Drupal\prev_next\PrevNextHelperInterface;

/**
 * Implements hook_entity_extra_field_info().
 */
function blog_entity_extra_field_info() {
  $extra = [];
  $extra['user']['user']['display']['blog__personal_blog_link'] = [
    'label' => t('Personal blog link'),
    'weight' => 0,
    'visible' => FALSE,
  ];
  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function blog_user_view(&$build, $account, $display, $view_mode) {
  if ($account->hasPermission('create blog_post content') && $display->getComponent('blog__personal_blog_link')) {
    // Build internal link based on router.
    $url = Url::fromRoute('view.blog.blog_user_all', ['user' => $account->id()]);
    $internal_link = Link::fromTextAndUrl(t('View recent blog entries'), $url)->toString();
    $build['blog__personal_blog_link'] = [
      '#type' => 'item',
      '#title' => t('Blog'),
      '#title_display' => 'invisible',
      '#markup' => $internal_link,
      '#attributes' => ['class' => ['blog']],
    ];
  }
}

/**
 * Implements hook_help().
 */
function blog_help($path, $arg) {
  switch ($path) {
    case 'help.page.blog':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Blog module allows registered users to maintain an online journal, or <em>blog</em>. Blogs are made up of individual <em>blog entries</em>. By default, the blog entries are displayed by creation time in descending order, with comments enabled, and are promoted to the site's front page. For more information, see the online handbook entry for <a href='@blog'>Blog module</a>.", ['@blog' => 'http://drupal.org/handbook/modules/blog/']) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Single-user blogs') . '</dt>';
      $output .= '<dd>' . t("Each user's blog entries are automatically displayed with a link to the user's main blog page. You can create as many single-user blogs as you have site users with permission to create blog content.") . '</dd>';
      $output .= '<dt>' . t('Multi-user blogs') . '</dt>';
      $output .= '<dd>' . t("Blog entries from each single-user blog are also aggregated into one central multi-user blog, which displays the blog content of all users in a single listing.") . '</dd>';
      $output .= '<dt>' . t('Navigation') . '</dt>';
      $output .= '<dd>' . t("There is an optional <em>Blogs</em> menu item added to the Navigation menu, which displays all blogs available on your site, and a <em>My blog</em> item displaying the current user's blog entries.") . '</dd>';
      $output .= '<dt>' . t('Blocks') . '</dt>';
      $output .= '<dd>' . t('The Blog module also creates a default <em>Recent blog posts</em> block that may be enabled at the <a href="@blocks">blocks administration page</a>.', ['@blocks' => Url::fromRoute('block.admin_display')->toString()]) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_node_links_alter().
 */
function blog_node_links_alter(array &$node_links, NodeInterface $entity, array &$context) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'blog_post' && $context['view_mode'] != 'rss') {
    $links = [];
    $links['blog_usernames_blog'] = [
      'title' => t("@username's Blog", [
        '@username' => $entity->getOwner()
          ->getDisplayName(),
      ]),
      'url' => Url::fromRoute('view.blog.blog_user_all', [
        'user' => $entity->getOwnerId(),
      ]),
      'attributes' => [
        'title' => t("Read @username's latest blog entries.", [
          '@username' => $entity->getOwner()
            ->getDisplayName(),
        ]),
      ],
    ];
    $node_links['usernames_blog'] = [
      '#theme' => 'links__node__blog',
      '#links' => $links,
      '#attributes' => ['class' => ['links', 'inline']],
    ];
  }
}

/**
 * Helper function to determine if a user has blog posts already.
 *
 * @param \Drupal\user\UserInterface|NULL $account
 *   Blog post owner user, or NULL.
 *
 * @return string
 *   Count of blog posts.
 */
function blog_post_counter($account = NULL) {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'blog_post')
    ->condition('status', 1)
    ->accessCheck(TRUE);
  if ($account !== NULL) {
    $query->condition('uid', $account->id());
  }
  return $query->count()
    ->execute();
}

/**
 * Implements hook_theme().
 */
function blog_theme() {
  return [
    'search_blog' => [
      'render element' => 'children',
    ],
  ];
}

function blog_preprocess_node(&$variables) {

  $variables['node'] = $variables['elements']['#node'];
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // add prev and next post, author profile
  if ($node->bundle() === 'blog_post') {
    /** @var PrevNextHelperInterface $prev_next_helper */
    $prev_next_helper = \Drupal::service('prev_next.helper');
    // Get the previous node id
    $prev_nid = $prev_next_helper->getPrevId($node->id());
    if ($prev_nid) {
      $prev_node = \Drupal\node\Entity\Node::load($prev_nid);
      $language = $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
      if ($prev_node->hasTranslation($language)) {
        $prev_node = $prev_node->getTranslation($language);
      }
      $cover_url = '';
      if ($prev_node->hasField('field_cover') && !$prev_node->get('field_cover')->isEmpty()) {
        $file = $prev_node->field_cover[0]->entity;
        // Get origin image URI.
        $image_uri = $file->getFileUri();
        // Load image style "thumbnail".
        $style = ImageStyle::load('blog_list_item');
        // Get URI.
        $uri = $style->buildUri($image_uri);
        $cover_url = file_create_url($uri);
      }

      $variables['prev_post'] = [
        'label' => t('Prev Post'),
        'url' => $prev_node->toUrl(),
        'title' => $prev_node->label(),
        'cover' => $cover_url
      ];
    }

    // Get the next node id
    $next_nid = $prev_next_helper->getNextId($node->id());
    if ($next_nid) {
      $next_node = \Drupal\node\Entity\Node::load($next_nid);
      $language = $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
      if ($next_node->hasTranslation($language)) {
        $next_node = $next_node->getTranslation($language);
      }
      $cover_url = '';
      if ($next_node->hasField('field_cover') && !$next_node->get('field_cover')->isEmpty()) {
        $file = $next_node->field_cover[0]->entity;
        // Get origin image URI.
        $image_uri = $file->getFileUri();
        // Load image style "thumbnail".
        $style = ImageStyle::load('blog_list_item');
        // Get URI.
        $uri = $style->buildUri($image_uri);
        $cover_url = file_create_url($uri);
      }
      $variables['next_post'] = [
        'label' => t('Next Post'),
        'url' => $next_node->toUrl(),
        'title' => $next_node->label(),
        'cover' => $cover_url
      ];
    }

    $author_user = $node->getOwner();
    $language = $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    if ($author_user->hasTranslation($language)) {
      $author_user = $author_user->getTranslation($language);
    }
    $variables['author_profile'] = [
      'author_url' => $author_user->toUrl(),
      'name' => '',
      'profile' => ''
    ];
    if (!$author_user->get('user_picture')->isEmpty()) {
      $file = $author_user->user_picture[0]->entity;
      // Get origin image URI.
      $image_uri = $file->getFileUri();
      $variables['author_profile']['picture'] = file_create_url($image_uri);
    } else {
      // get default user picture
      $field_info = FieldConfig::loadByName('user', 'user', 'user_picture');
      $image_uuid = $field_info->getSetting('default_image')['uuid'];
      $image = Drupal::service('entity.repository')->loadEntityByUuid('file', $image_uuid);
      $image_uri = $image->getFileUri();
      $variables['author_profile']['picture'] = file_create_url($image_uri);
    }

    if (!$author_user->get('blog_author_name')->isEmpty()) {
      $variables['author_profile']['name'] = $author_user->blog_author_name->value;
    }

    if (!$author_user->get('blog_author_profile')->isEmpty()) {
      $variables['author_profile']['profile'] = $author_user->blog_author_profile->value;
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function blog_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() == 'user') {
    $fields['blog_author_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Blog author name'))
      ->setDescription(t('Name of the blog author.'))
      ->setRevisionable(FALSE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('view', [
        'label' => 'above',
        'type' => 'string'
      ])
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 20
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['blog_author_profile'] = BaseFieldDefinition::create('string_long')
      ->setLabel(t('Blog author profile'))
      ->setDescription(t('Description of the blog author.'))
      ->setRevisionable(FALSE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('view', [
        'label' => 'above',
        'type' => 'basic_string'
      ])
      ->setDisplayOptions('form', [
        'type' => 'string_textarea',
        'weight' => 20
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

function blog_preprocess_field(&$variables) {
  $element = $variables['element'];
  if ($element['#field_type'] == 'comment') {
    // Provide contextual information.
    $variables['comment_form_headline'] = t('Leave a Reply');
  }
}

function blog_locale_translation_projects_alter(&$projects) {
  // The translations are located at a custom translation sever
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('blog')->getPath();
  $projects['blog']['info']['interface translation server pattern']
    = $module_path . '/' . $projects['blog']['info']['interface translation server pattern'];
}
